{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Carousel","props","useState","index","setIndex","showFrontArrow","setShowFrontArrow","showBackArrow","setShowBackArrow","React","view","setView","videos","Video","videoTitle","fileName","link","linkText","descriptions","useEffect","length","style","display","flexDirection","width","IconButton","className","visibility","sx","color","marginInline","size","disableRipple","onClick","Math","max","fontSize","min","ToggleButtonGroup","border","marginTop","borderRadius","value","exclusive","onChange","event","nextView","map","_","i","ToggleButton","href","target","rel","src","controls","App","Navbar","variant","bg","Container","Brand","classname","Nav","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d9ca312.chunk.js","sourcesContent":["import './App.css';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nimport React, { useState, useEffect, Fragment } from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\r\n\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport CircleIcon from '@mui/icons-material/Circle';\r\n\r\nimport text from \"./bobRossDescription.js\";\r\n// import text from \"./glowRunnersDescription.js\";\r\n// import text from \"./pirateShipDescription.js\";\r\n\r\nfunction Carousel(props) {\r\n  const [index, setIndex] = useState(0);\r\n  const [showFrontArrow, setShowFrontArrow] = useState(true);\r\n  const [showBackArrow, setShowBackArrow] = useState(true);\r\n  \r\n  const [view, setView] = React.useState('list');\r\n  \r\n  const videos = [\r\n    <Video key=\"index\"\r\n      videoTitle=\"OpenGL Tech Demo\"\r\n      fileName=\"https://openglvideo.s3.eu-west-2.amazonaws.com/finalversion1.mp4\" \r\n      link=\"https://github.com/wet-dog/PirateShip\"\r\n      linkText=\"Try it out here\"\r\n    >\r\n    </Video>,\r\n    <Video key=\"index\"\r\n      videoTitle=\"Bob Ross the Boss\"\r\n      fileName=\"./bobrosstheboss.mp4\"\r\n      link=\"https://wet-dog.github.io/BobRossTheBossWebGL/\"\r\n      linkText=\"Try it out here\"\r\n    >\r\n    </Video>,\r\n    <Video key=\"index\"\r\n      videoTitle=\"Glow Runners\"\r\n      fileName=\"./glowrunners.mp4\" \r\n      link=\"https://briggsywxf.github.io/bathhack21/\"\r\n      linkText=\"Try it out here\"\r\n    >\r\n    </Video>\r\n  ]\r\n\r\n  const descriptions = [\r\n    <>\r\n      <p>For this demo project I utilised C++ skills in a low-level graphics programming environment. The basic rendering setup was created with models, lighting, input and a camera I learnt from learnopengl.com.<br></br><br></br>\r\n\r\nI then researched and implemented shaders in GLSL. First, I recreated a Unity shader, with an end result of stormy, stylistic clouds, texturing the skydome which surrounds the player. This shader mainly uses flow maps, a technique introduced by Valve for Portal 2, giving a varying and compelling flow to the clouds.<br></br><br></br>\r\n\r\nThe second shader I created was my refractive glass shader, which I implemented based on  the Generic Refraction Simulation chapter in Nvidia’s GPU Gems 2. This detailed how I should create the shader, but without GLSL specifics. Details included: using frame buffers to get a “refraction map” which could be combined with a model’s normal map in order to perturbe the scene behind the model.<br></br><br></br>\r\n\r\nThe idea behind the simulation is to use what's behind the bottle as its texture with this texture being distorted to make it look like light is being bent. This texture is created from a framebuffer, and then the distortion is applied with a normal map.<br></br><br></br>\r\n\r\nOne problem I encountered was that the texture included pixels that weren't directly behind the bottle. This also included objects that were in front of the bottle, which shouldn't show up in refraction. To solve this problem I masked the framebuffer texture so that only pixels behind the bottle are used. Then, to make the glass look more realistic I implemented the Fresnel effect. This mixes the diffuse and refraction texture depending on a Fresnel term, which means that for different viewing angles the refraction of the bottle will change - just like in real life.<br></br><br></br>\r\n\r\nTo make the demo more immersive, I decided to add some physics, implementing a player class with physics and a hitbox which collides with the world. I chose to implement physics from scratch, wanting to learn how everything is made from the ground up and all the technical detail involved. I used Kasper Fauerby’s paper on capsule collision (capsules being widely used in engines, such as Unity’s engine) which successfully detects and resolves collisions between the player and geometry, relying heavily on vector maths. The collisions are resolved with the player sliding along geometry instead of just getting stuck on it. This also allows for movement up ramps and along walls.<br></br><br></br> \r\n\r\nThe final shader that I made was my water shader, which used the same techniques as the clouds shader but modifying the textures to look like water instead of clouds. I quickly made a wave like texture in blender utilising different noise textures mixed together (perlin and voronoi) with some contrast adjustments.<br></br><br></br>\r\n\r\nAll the visuals wouldn’t have been possible without some great 3D models I found online, which I also had to modify slightly to get them to work in my OpenGL environment. The clouds, water and glass shaders combined with the pirate ship and bottle models made for a moody environment to showcase my project together with the ability to have the player immersed in the scene with collision and gravity physics. I really enjoyed putting this project together to show how I’m developing my skills and look forward to developing it further as I learn more.\r\n    </p><br></br>\r\n    <p>Credits:<br></br><br></br>\r\n    learnopengl.com - Joey de Vries - https://twitter.com/JoeyDeVriez. Code samples used and modified under their https://creativecommons.org/licenses/by-nc/4.0/ license<br></br><br></br>\r\n\r\nhttp://vfxmike.blogspot.com/2018/07/dark-and-stormy.html translating their awesome Unity shader to GLSL under its GNU General Public License v3.0<br></br><br></br>\r\n\r\nhttps://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-19-generic-refraction-simulation for the technique to create my glass refraction shader<br></br><br></br>\r\n\r\nhttps://sketchfab.com/3d-models/pirate-ship-4ee306824b934cf0a833a97da5b277bf - the pirate ship inside the bottle - CC Attribution - changes made in making a low poly version<br></br><br></br>\r\n\r\nhttps://sketchfab.com/3d-models/ship-in-a-bottle-9ddbc5b32da94bafbfdb56e1f6be9a38 - the ship bottle - CC-Attribution-NonCommercial - changes made in making a low poly version<br></br><br></br>\r\n\r\nhttp://www.peroxide.dk/papers/collision/collision.pdf - collision detection and resolution based on this paper by Kasper Fauerby\r\n    </p>\r\n    </>,\r\n    \r\n    <>\r\n      <h5>Hackathon Team: James Johnson, Sam Briggs, Simon Balfe, Ayush Sharma</h5>\r\n      <h6>Voice-over by: Sam Briggs</h6>\r\n      <p>Bob Ross the Boss is a game created during Oxford Hack 2020, a 36 hour hackathon. Why is Bob Ross the theme of the game? Why not? My team needed direction, and quick, so I suggested our titular character. And so the mad rush to create Bob Ross the Boss began. It was a great learning experience, with all of us being inexperienced in Unity, and we were pleased with the result.</p>\r\n      <p>My contributions: main menu interface and design, UI, enemy pathfinding (A* algorithm), zombie wave management system, and miscellaneous gameplay scripting.</p>\r\n    </>,\r\n    \r\n    <>\r\n      <h5>Hackathon Team: James Johnson, Sam Briggs, Simon Balfe</h5>\r\n      <h6>Voice-over by: Sam Briggs</h6>\r\n      <p>Glow Runners was created during Bath Hack 2021, a 24 hour hackathon. This was the second game our hackathon team made together, and while we had more Unity experience, the deadline was much shorter this time round… Would we be able to produce another high quality game? Thankfully it was our best work yet, winning the “Hacker’s Choice” award and the “Most Entertaining” award!</p>\r\n      <p>My contributions: gameplay mechanics (obstacles, boost pads etc.), map design, main menu interface and design, UI, and creating visual elements and the look of the game.</p>\r\n    </>\r\n  ]\r\n\r\n  const handleChange = (event, nextView) => {\r\n    setView(nextView);\r\n    setIndex(nextView);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (index === 0)\r\n      setShowBackArrow(false);\r\n    else\r\n      setShowBackArrow(true);\r\n\r\n    if (index === videos.length - 1)\r\n      setShowFrontArrow(false);\r\n    else\r\n      setShowFrontArrow(true);\r\n\r\n    setView(index);\r\n  }, [view, index, videos.length]);\r\n\r\n  return (\r\n    <>\r\n      <h1>{videos[index].props.videoTitle}</h1>\r\n      \r\n      <div style={{display: \"flex\", flexDirection: \"row\", width: \"100vmin\"}}>\r\n        <IconButton\r\n          className=\"IconButton\"\r\n          style={showBackArrow ? {} : { visibility: 'hidden' }}\r\n          sx={{ color: \"white\", marginInline: \".5em\"}}\r\n          size=\"\"\r\n          disableRipple=\"true\"\r\n          onClick={() => setIndex(Math.max(0, index - 1))}\r\n        >\r\n          <ArrowBackIcon sx={{fontSize: \"2em\"}}/>\r\n        </IconButton>\r\n\r\n        <div style={{display: \"flex\", flexDirection: \"column\"}}>\r\n          {videos[index]}\r\n        </div>\r\n\r\n        <IconButton\r\n          className=\"IconButton\"\r\n          style={showFrontArrow ? {} : { visibility: 'hidden' }}\r\n          sx={{ color: \"white\", marginInline: \".5em\"}}\r\n          size=\"\"\r\n          disableRipple=\"true\"\r\n          onClick={() => setIndex(Math.min(index + 1, videos.length - 1))}\r\n        >\r\n          <ArrowForwardIcon sx={{fontSize: \"2em\"}}/>\r\n        </IconButton>\r\n      </div>\r\n\r\n      <ToggleButtonGroup\r\n        sx={{\r\n          '& .MuiToggleButtonGroup-grouped': {\r\n            border: 0,\r\n            marginInline: \"1em\",\r\n            marginTop: \"1em\",\r\n            color: \"grey\",\r\n            '&.Mui-disabled': {\r\n              border: 0,\r\n            },\r\n            '&:not(:first-of-type)': {\r\n              borderRadius: \"5em\",\r\n            },\r\n            '&:first-of-type': {\r\n              borderRadius: \"5em\",\r\n            },\r\n            '&.Mui-selected': {\r\n              border: 0,\r\n              color: \"white\",\r\n            },            \r\n          },\r\n        }}\r\n        value={view}\r\n        exclusive\r\n        onChange={handleChange}\r\n      >\r\n      {videos.map((_, i) => \r\n        <ToggleButton value={i}>\r\n          <CircleIcon />\r\n        </ToggleButton>\r\n      )}\r\n      </ToggleButtonGroup>\r\n\r\n      <a className=\"link\" href={videos[index].props.link} target=\"_blank\" rel=\"noopener noreferrer\">{videos[index].props.link}</a>\r\n      {descriptions[index]}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Video(props) {\r\n  return (\r\n    <>\r\n      <video className='video-tag' src={props.fileName} controls></video>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar variant=\"dark\" bg=\"dark\" className=\"navbar\">\r\n        <Container>\r\n          <Navbar.Brand classname=\"navbar-brand\">James Johnson</Navbar.Brand>\r\n          <Nav className=\"me-auto\">\r\n          </Nav>\r\n        </Container>\r\n      </Navbar>\r\n\r\n      <header className=\"App-header\">\r\n        <Carousel></Carousel>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://use.typekit.net/gnm1bdt.css\"></link>\n    <link rel=\"stylesheet\" href=\"https://use.typekit.net/gnm1bdt.css\"></link>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}